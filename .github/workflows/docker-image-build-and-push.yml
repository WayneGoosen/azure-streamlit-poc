name: Docker Image Build and Push

on:
  push:
    branches: [ "main" ]
    paths:
      - 'app/**'
  workflow_dispatch:

# If this workflow is triggered again while a previous run is still in progress, GitHub will queue the new run until the previous one completes.
concurrency: 
  group: build-and-push-image

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest

    env:
      REGISTRY: ghcr.io

    permissions:
      contents: write
      packages: write

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # image name needs to be lowercase, some accounts have uppercase letters
      - name: Get owner/repo name and convert to lowercase
        id: get-image-name
        run: echo "image-name=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      # Install GitVersion for versioning
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v1.1.1
        with:
          versionSpec: '5.x'

      # Execute GitVersion to get the version number
      - name: Use GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v1.1.1

      # Set up Git user for tagging
      - uses: fregante/setup-git-user@v2

      # Create a new tag based on the version number
      - name: Create Tag
        run: git tag -a ${{ steps.gitversion.outputs.semVer }} -m "Auto-generated tag from GitHub Action."
      
      # Push the newly created tags to the repository
      - name: Push Tags
        run: git push origin --tags

      # Log in to the Container registry
      - name: Log in to the Container registry
        uses: docker/login-action@v3.2.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push the Docker image to the registry
      - name: Build and push Docker image
        uses: docker/build-push-action@v5.3.0
        with:
          context: ./app
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ steps.get-image-name.outputs.image-name }}:latest
            ${{ env.REGISTRY }}/${{ steps.get-image-name.outputs.image-name }}:${{ steps.gitversion.outputs.semVer }}